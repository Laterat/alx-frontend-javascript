!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t){var n=[{firstName:"John",lastName:"Doe",age:20,location:"New York"},{firstName:"Kenna",lastName:"Chala",age:23,location:"Adama"}],r=document.createElement("table");r.style.border="1px solid black";var o=document.createElement("tr");["First Name","Location"].forEach((function(e){var t=document.createElement("th");t.textContent=e,t.style.border="1px solid black",t.style.padding="4px",o.appendChild(t)})),r.appendChild(o),n.forEach((function(e){var t=document.createElement("tr"),n=document.createElement("td"),o=document.createElement("td");n.textContent=e.firstName,n.style.border="1px solid black",n.style.padding="4px",o.textContent=e.location,o.style.border="1px solid black",o.style.padding="4px",t.appendChild(n),t.appendChild(o),r.appendChild(t)})),document.body.appendChild(r)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,